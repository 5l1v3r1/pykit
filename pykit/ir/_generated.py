# -*- coding: utf-8 -*-

"""
    Generated builder methods.
"""

from __future__ import print_function, division, absolute_import

from pykit import types, config
from pykit.ir import Op, Value, Const, ops
from pykit.ir.verification import verify_op_syntax


class GeneratedBuilder(object):
    _const = lambda val: Const(val, types.Opaque)
    _insert_op = lambda self, op: None  # noop

    #===------------------------------------------------------------------===
    # Generated by pykit.utils._generate
    #===------------------------------------------------------------------===
    
    Sin                  = _const(ops.Sin)
    Asin                 = _const(ops.Asin)
    Sinh                 = _const(ops.Sinh)
    Asinh                = _const(ops.Asinh)
    Cos                  = _const(ops.Cos)
    Acos                 = _const(ops.Acos)
    Cosh                 = _const(ops.Cosh)
    Acosh                = _const(ops.Acosh)
    Tan                  = _const(ops.Tan)
    Atan                 = _const(ops.Atan)
    Atan2                = _const(ops.Atan2)
    Tanh                 = _const(ops.Tanh)
    Atanh                = _const(ops.Atanh)
    Log                  = _const(ops.Log)
    Log2                 = _const(ops.Log2)
    Log10                = _const(ops.Log10)
    Log1p                = _const(ops.Log1p)
    Exp                  = _const(ops.Exp)
    Exp2                 = _const(ops.Exp2)
    Expm1                = _const(ops.Expm1)
    Floor                = _const(ops.Floor)
    Ceil                 = _const(ops.Ceil)
    Abs                  = _const(ops.Abs)
    Erfc                 = _const(ops.Erfc)
    Rint                 = _const(ops.Rint)
    Pow                  = _const(ops.Pow)
    Round                = _const(ops.Round)

    def alloca(self, type, value0, **kwds):
        assert isinstance(value0, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('alloca', type, [value0], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def load(self, type, value0, **kwds):
        assert isinstance(value0, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('load', type, [value0], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def store(self, value0, value1, **kwds):
        assert isinstance(value0, Value)
        assert isinstance(value1, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('store', types.Void, [value0, value1], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def convert(self, type, value0, **kwds):
        assert isinstance(value0, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('convert', type, [value0], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def bitcast(self, type, value0, **kwds):
        assert isinstance(value0, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('bitcast', type, [value0], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def phi(self, type, lst0, lst1, **kwds):
        assert isinstance(lst0, list)
        assert isinstance(lst1, list)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('phi', type, [lst0, lst1], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def exc_setup(self, lst0, **kwds):
        assert isinstance(lst0, list)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('exc_setup', types.Void, [lst0], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def exc_catch(self, lst0, **kwds):
        assert isinstance(lst0, list)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('exc_catch', types.Void, [lst0], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def jump(self, value0, **kwds):
        assert isinstance(value0, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('jump', types.Void, [value0], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def cbranch(self, value0, value1, value2, **kwds):
        assert isinstance(value0, Value)
        assert isinstance(value1, Value)
        assert isinstance(value2, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('cbranch', types.Void, [value0, value1, value2], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def exc_throw(self, value0, **kwds):
        assert isinstance(value0, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('exc_throw', types.Void, [value0], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def ret(self, obj0, **kwds):
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('ret', types.Void, [obj0], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def call(self, type, value0, lst0, **kwds):
        assert isinstance(value0, Value)
        assert isinstance(lst0, list)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('call', type, [value0, lst0], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def call_math(self, type, obj0, lst0, **kwds):
        assert isinstance(lst0, list)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('call_math', type, [obj0, lst0], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def add(self, type, value0, value1, **kwds):
        assert isinstance(value0, Value)
        assert isinstance(value1, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('add', type, [value0, value1], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def addressof(self, type, value0, **kwds):
        assert isinstance(value0, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('addressof', type, [value0], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def sizeof(self, type, value0, **kwds):
        assert isinstance(value0, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('sizeof', type, [value0], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def ptradd(self, type, value0, value1, **kwds):
        assert isinstance(value0, Value)
        assert isinstance(value1, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('ptradd', type, [value0, value1], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def ptrload(self, type, value0, **kwds):
        assert isinstance(value0, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('ptrload', type, [value0], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def ptrstore(self, value0, value1, **kwds):
        assert isinstance(value0, Value)
        assert isinstance(value1, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('ptrstore', types.Void, [value0, value1], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def ptrcast(self, type, value0, **kwds):
        assert isinstance(value0, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('ptrcast', type, [value0], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def ptr_isnull(self, type, value0, **kwds):
        assert isinstance(value0, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('ptr_isnull', type, [value0], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def ge(self, type, value0, value1, **kwds):
        assert isinstance(value0, Value)
        assert isinstance(value1, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('ge', type, [value0, value1], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def getfield(self, type, value0, obj0, **kwds):
        assert isinstance(value0, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('getfield', type, [value0, obj0], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def setfield(self, value0, obj0, value1, **kwds):
        assert isinstance(value0, Value)
        assert isinstance(value1, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('setfield', types.Void, [value0, obj0, value1], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def extractfield(self, type, value0, obj0, **kwds):
        assert isinstance(value0, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('extractfield', type, [value0, obj0], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def insertfield(self, type, value0, obj0, value1, **kwds):
        assert isinstance(value0, Value)
        assert isinstance(value1, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('insertfield', type, [value0, obj0, value1], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def extractvalue(self, type, value0, value1, **kwds):
        assert isinstance(value0, Value)
        assert isinstance(value1, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('extractvalue', type, [value0, value1], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def insertvalue(self, type, value0, value1, value2, **kwds):
        assert isinstance(value0, Value)
        assert isinstance(value1, Value)
        assert isinstance(value2, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('insertvalue', type, [value0, value1, value2], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def extractelement(self, type, value0, value1, **kwds):
        assert isinstance(value0, Value)
        assert isinstance(value1, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('extractelement', type, [value0, value1], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def insertelement(self, type, value0, value1, value2, **kwds):
        assert isinstance(value0, Value)
        assert isinstance(value1, Value)
        assert isinstance(value2, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('insertelement', type, [value0, value1, value2], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def shufflevector(self, type, value0, value1, value2, **kwds):
        assert isinstance(value0, Value)
        assert isinstance(value1, Value)
        assert isinstance(value2, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('shufflevector', type, [value0, value1, value2], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def packvector(self, type, value0, **kwds):
        assert isinstance(value0, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('packvector', type, [value0], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def unpackvector(self, type, value0, **kwds):
        assert isinstance(value0, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('unpackvector', type, [value0], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def sub(self, type, value0, value1, **kwds):
        assert isinstance(value0, Value)
        assert isinstance(value1, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('sub', type, [value0, value1], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def mul(self, type, value0, value1, **kwds):
        assert isinstance(value0, Value)
        assert isinstance(value1, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('mul', type, [value0, value1], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def div(self, type, value0, value1, **kwds):
        assert isinstance(value0, Value)
        assert isinstance(value1, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('div', type, [value0, value1], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def mod(self, type, value0, value1, **kwds):
        assert isinstance(value0, Value)
        assert isinstance(value1, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('mod', type, [value0, value1], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def lshift(self, type, value0, value1, **kwds):
        assert isinstance(value0, Value)
        assert isinstance(value1, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('lshift', type, [value0, value1], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def rshift(self, type, value0, value1, **kwds):
        assert isinstance(value0, Value)
        assert isinstance(value1, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('rshift', type, [value0, value1], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def bitand(self, type, value0, value1, **kwds):
        assert isinstance(value0, Value)
        assert isinstance(value1, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('bitand', type, [value0, value1], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def bitor(self, type, value0, value1, **kwds):
        assert isinstance(value0, Value)
        assert isinstance(value1, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('bitor', type, [value0, value1], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def bitxor(self, type, value0, value1, **kwds):
        assert isinstance(value0, Value)
        assert isinstance(value1, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('bitxor', type, [value0, value1], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def invert(self, type, value0, **kwds):
        assert isinstance(value0, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('invert', type, [value0], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def not_(self, type, value0, **kwds):
        assert isinstance(value0, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('not_', type, [value0], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def uadd(self, type, value0, **kwds):
        assert isinstance(value0, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('uadd', type, [value0], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def usub(self, type, value0, **kwds):
        assert isinstance(value0, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('usub', type, [value0], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def eq(self, type, value0, value1, **kwds):
        assert isinstance(value0, Value)
        assert isinstance(value1, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('eq', type, [value0, value1], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def ne(self, type, value0, value1, **kwds):
        assert isinstance(value0, Value)
        assert isinstance(value1, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('ne', type, [value0, value1], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def lt(self, type, value0, value1, **kwds):
        assert isinstance(value0, Value)
        assert isinstance(value1, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('lt', type, [value0, value1], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def le(self, type, value0, value1, **kwds):
        assert isinstance(value0, Value)
        assert isinstance(value1, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('le', type, [value0, value1], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def gt(self, type, value0, value1, **kwds):
        assert isinstance(value0, Value)
        assert isinstance(value1, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('gt', type, [value0, value1], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def is_(self, type, value0, value1, **kwds):
        assert isinstance(value0, Value)
        assert isinstance(value1, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('is_', type, [value0, value1], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def check_error(self, value0, value1, **kwds):
        assert isinstance(value0, Value)
        assert isinstance(value1, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('check_error', types.Void, [value0, value1], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def new_exc(self, type, value0, value1, **kwds):
        assert isinstance(value0, Value)
        assert isinstance(value1, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('new_exc', type, [value0, value1], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op

    def print(self, value0, **kwds):
        assert isinstance(value0, Value)
        assert type is not None
        register = kwds.pop('result', None)
        op = Op('print', types.Void, [value0], register, metadata=kwds)
        if config.op_verify:
            verify_op_syntax(op)
        self._insert_op(op)
        return op
