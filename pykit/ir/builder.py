# -*- coding: utf-8 -*-

"""
Convenience IR builder.
"""

from __future__ import print_function, division, absolute_import
from pykit.ir import Op, Const, ops

_const = Const

def _op(op):
    def build_op(type, args=None, result=None):
        for i, arg in enumerate(args):
            if isinstance(arg, Op):
                args[i] = arg.result
        return Op(op, type, args, result)

    build_op.__name__ = op
    return build_op


class Builder(object):
    """
    Simple Op builder.
    """

    def __init__(self, func):
        self.func = func
        self.module = func.module

    def gen_call_external(self, fname, args):
        gv = self.module.get_global(fname)
        assert gv.type.is_function, gv
        assert gv.type.argtypes == [arg.type for arg in args]
        return self.call_external(gv.type.res, [Const(fname), args])

    # Generated by pykit.utils._generate
    Abs                  = _const(ops.Abs )
    Acos                 = _const(ops.Acos )
    Acosh                = _const(ops.Acosh)
    Add                  = _const(ops.Add)
    Asin                 = _const(ops.Asin )
    Asinh                = _const(ops.Asinh)
    Atan                 = _const(ops.Atan )
    Atan2                = _const(ops.Atan2 )
    Atanh                = _const(ops.Atanh)
    Bitand               = _const(ops.Bitand)
    Bitor                = _const(ops.Bitor)
    Bitxor               = _const(ops.Bitxor)
    Ceil                 = _const(ops.Ceil )
    Cos                  = _const(ops.Cos )
    Cosh                 = _const(ops.Cosh )
    Div                  = _const(ops.Div)
    Eq                   = _const(ops.Eq)
    Erfc                 = _const(ops.Erfc )
    Exp                  = _const(ops.Exp )
    Exp2                 = _const(ops.Exp2 )
    Expm1                = _const(ops.Expm1)
    Floor                = _const(ops.Floor )
    Floordiv             = _const(ops.Floordiv)
    Gt                   = _const(ops.Gt)
    Gte                  = _const(ops.Gte)
    In                   = _const(ops.In)
    Invert               = _const(ops.Invert)
    Is                   = _const(ops.Is)
    Isnot                = _const(ops.Isnot)
    Log                  = _const(ops.Log )
    Log10                = _const(ops.Log10 )
    Log1p                = _const(ops.Log1p)
    Log2                 = _const(ops.Log2 )
    Lshift               = _const(ops.Lshift)
    Lt                   = _const(ops.Lt)
    Lte                  = _const(ops.Lte)
    Mod                  = _const(ops.Mod)
    Mult                 = _const(ops.Mult)
    Not                  = _const(ops.Not)
    Noteq                = _const(ops.Noteq)
    Notin                = _const(ops.Notin)
    Pow                  = _const(ops.Pow )
    Rint                 = _const(ops.Rint)
    Round                = _const(ops.Round)
    Rshift               = _const(ops.Rshift)
    Sin                  = _const(ops.Sin )
    Sinh                 = _const(ops.Sinh )
    Sub                  = _const(ops.Sub)
    Tan                  = _const(ops.Tan )
    Tanh                 = _const(ops.Tanh )
    Uadd                 = _const(ops.Uadd)
    Usub                 = _const(ops.Usub)
    alloca               = _op(ops.alloca)
    allpairs             = _op(ops.allpairs)
    box                  = _op(ops.box)
    convert              = _op(ops.convert)
    load                 = _op(ops.load)
    map                  = _op(ops.map)
    max                  = _op(ops.max)
    min                  = _op(ops.min)
    new_dict             = _op(ops.new_dict)
    new_list             = _op(ops.new_list)
    new_set              = _op(ops.new_set)
    new_tuple            = _op(ops.new_tuple)
    reduce               = _op(ops.reduce)
    ret                  = _op(ops.ret)
    scan                 = _op(ops.scan)
    store                = _op(ops.store)
    unbox                = _op(ops.unbox)
    new_string           = _op(ops.new_string)
    new_unicode          = _op(ops.new_unicode)
    new_object           = _op(ops.new_object)
    call                 = _op(ops.call)
    call_external        = _op(ops.call_external)
    call_math            = _op(ops.call_math)
    call_obj             = _op(ops.call_obj)
    call_virtual         = _op(ops.call_virtual)
    cbranch              = _op(ops.cbranch)
    exc_catch            = _op(ops.exc_catch)
    exc_setup            = _op(ops.exc_setup)
    exc_throw            = _op(ops.exc_throw)
    func_from_addr       = _op(ops.func_from_addr)
    function             = _op(ops.function)
    jump                 = _op(ops.jump)
    new_complex          = _op(ops.new_complex)
    new_data             = _op(ops.new_data)
    new_struct           = _op(ops.new_struct)
    partial              = _op(ops.partial)
    phi                  = _op(ops.phi)
    ptradd               = _op(ops.ptradd)
    ptrcast              = _op(ops.ptrcast)
    ptrload              = _op(ops.ptrload)
    ptrstore             = _op(ops.ptrstore)
    binop                = _op(ops.binop)
    compare              = _op(ops.compare)
    getfield             = _op(ops.getfield)
    getfield_struct      = _op(ops.getfield_struct)
    getindex             = _op(ops.getindex)
    getiter              = _op(ops.getiter)
    getslice             = _op(ops.getslice)
    next                 = _op(ops.next)
    ptr_isnull           = _op(ops.ptr_isnull)
    setfield             = _op(ops.setfield)
    setfield_struct      = _op(ops.setfield_struct)
    setindex             = _op(ops.setindex)
    setslice             = _op(ops.setslice)
    slice                = _op(ops.slice)
    unop                 = _op(ops.unop)
    yieldfrom            = _op(ops.yieldfrom)
    yieldval             = _op(ops.yieldval)
    from_object          = _op(ops.from_object)
    make_cell            = _op(ops.make_cell)
    make_frame           = _op(ops.make_frame)
    thread_join          = _op(ops.thread_join)
    thread_start         = _op(ops.thread_start)
    threadpool_close     = _op(ops.threadpool_close)
    threadpool_join      = _op(ops.threadpool_join)
    threadpool_start     = _op(ops.threadpool_start)
    threadpool_submit    = _op(ops.threadpool_submit)
    to_object            = _op(ops.to_object)
    ptr_to_int           = _op(ops.ptr_to_int)
    check_overflow       = _op(ops.check_overflow)
    gc_gotref            = _op(ops.gc_gotref)
    int_to_ptr           = _op(ops.int_to_ptr)
    load_vtable          = _op(ops.load_vtable)
    vtable_lookup        = _op(ops.vtable_lookup)
    gc_alloc             = _op(ops.gc_alloc)
    gc_decref            = _op(ops.gc_decref)
    gc_giveref           = _op(ops.gc_giveref)
    gc_incref            = _op(ops.gc_incref)
    gc_dealloc           = _op(ops.gc_dealloc)
    gc_collect           = _op(ops.gc_collect)
    gc_read_barrier      = _op(ops.gc_read_barrier)
    gc_traverse          = _op(ops.gc_traverse)
    gc_write_barrier     = _op(ops.gc_write_barrier)